// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pxguide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PxGuideClient is the client API for PxGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PxGuideClient interface {
	Start(ctx context.Context, in *StartArgs, opts ...grpc.CallOption) (*StartReply, error)
	Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error)
	Accept(ctx context.Context, in *AcceptArgs, opts ...grpc.CallOption) (*AcceptReply, error)
	Decided(ctx context.Context, in *DecidedArgs, opts ...grpc.CallOption) (*DecidedReply, error)
}

type pxGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewPxGuideClient(cc grpc.ClientConnInterface) PxGuideClient {
	return &pxGuideClient{cc}
}

func (c *pxGuideClient) Start(ctx context.Context, in *StartArgs, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := c.cc.Invoke(ctx, "/pxguide.PxGuide/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxGuideClient) Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := c.cc.Invoke(ctx, "/pxguide.PxGuide/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxGuideClient) Accept(ctx context.Context, in *AcceptArgs, opts ...grpc.CallOption) (*AcceptReply, error) {
	out := new(AcceptReply)
	err := c.cc.Invoke(ctx, "/pxguide.PxGuide/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pxGuideClient) Decided(ctx context.Context, in *DecidedArgs, opts ...grpc.CallOption) (*DecidedReply, error) {
	out := new(DecidedReply)
	err := c.cc.Invoke(ctx, "/pxguide.PxGuide/Decided", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PxGuideServer is the server API for PxGuide service.
// All implementations must embed UnimplementedPxGuideServer
// for forward compatibility
type PxGuideServer interface {
	Start(context.Context, *StartArgs) (*StartReply, error)
	Prepare(context.Context, *PrepareArgs) (*PrepareReply, error)
	Accept(context.Context, *AcceptArgs) (*AcceptReply, error)
	Decided(context.Context, *DecidedArgs) (*DecidedReply, error)
	mustEmbedUnimplementedPxGuideServer()
}

// UnimplementedPxGuideServer must be embedded to have forward compatible implementations.
type UnimplementedPxGuideServer struct {
}

func (UnimplementedPxGuideServer) Start(context.Context, *StartArgs) (*StartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedPxGuideServer) Prepare(context.Context, *PrepareArgs) (*PrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPxGuideServer) Accept(context.Context, *AcceptArgs) (*AcceptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPxGuideServer) Decided(context.Context, *DecidedArgs) (*DecidedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decided not implemented")
}
func (UnimplementedPxGuideServer) mustEmbedUnimplementedPxGuideServer() {}

// UnsafePxGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PxGuideServer will
// result in compilation errors.
type UnsafePxGuideServer interface {
	mustEmbedUnimplementedPxGuideServer()
}

func RegisterPxGuideServer(s grpc.ServiceRegistrar, srv PxGuideServer) {
	s.RegisterService(&PxGuide_ServiceDesc, srv)
}

func _PxGuide_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxGuideServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pxguide.PxGuide/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxGuideServer).Start(ctx, req.(*StartArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxGuide_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxGuideServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pxguide.PxGuide/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxGuideServer).Prepare(ctx, req.(*PrepareArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxGuide_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxGuideServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pxguide.PxGuide/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxGuideServer).Accept(ctx, req.(*AcceptArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PxGuide_Decided_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecidedArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PxGuideServer).Decided(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pxguide.PxGuide/Decided",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PxGuideServer).Decided(ctx, req.(*DecidedArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PxGuide_ServiceDesc is the grpc.ServiceDesc for PxGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PxGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pxguide.PxGuide",
	HandlerType: (*PxGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _PxGuide_Start_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _PxGuide_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _PxGuide_Accept_Handler,
		},
		{
			MethodName: "Decided",
			Handler:    _PxGuide_Decided_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pxguide/px_guide.proto",
}
